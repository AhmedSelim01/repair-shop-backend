
# REPAIR SHOP API - THUNDER CLIENT TEST COLLECTION
# Copy and paste these requests into Thunder Client

## ENVIRONMENT VARIABLES
# Set these in Thunder Client Environment:
# baseUrl: http://localhost:3000
# authToken: (will be set from login response)
# adminToken: (will be set from admin login response)

## üîê AUTHENTICATION TESTS

### 1. Register New User
POST {{baseUrl}}/api/auth/register
Content-Type: application/json

{
  "name": "John Doe",
  "email": "john.doe@example.com",
  "phone": "+971501234567",
  "password": "SecurePass123!",
  "role": "truck_owner"
}

### 2. User Login
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "email": "john.doe@example.com",
  "password": "SecurePass123!"
}
# Save the token from response as authToken

### 3. Register Admin User
POST {{baseUrl}}/api/auth/register
Content-Type: application/json

{
  "name": "Admin User",
  "email": "admin@repairshop.com",
  "phone": "+971509876543",
  "password": "AdminPass123!",
  "role": "admin"
}

### 4. Admin Login
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "email": "admin@repairshop.com",
  "password": "AdminPass123!"
}
# Save the token from response as adminToken

## üë• USER MANAGEMENT TESTS

### 5. Get User Profile
GET {{baseUrl}}/api/users/profile
Authorization: Bearer {{authToken}}

### 6. Get All Users (Admin Only)
GET {{baseUrl}}/api/users
Authorization: Bearer {{adminToken}}

### 7. Update User Profile
PUT {{baseUrl}}/api/users/profile
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "name": "John Doe Updated",
  "phone": "+971501234999"
}

## üè¢ COMPANY MANAGEMENT TESTS

### 8. Create Company Profile
POST {{baseUrl}}/api/companies
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "companyName": "ABC Transport LLC",
  "contactEmail": "contact@abctransport.com",
  "phoneNumber": "+971504567890",
  "address": {
    "street": "123 Business Bay",
    "city": "Dubai",
    "state": "Dubai",
    "zipCode": "00000",
    "country": "UAE"
  },
  "companyLicenseDetails": {
    "licenseNumber": "DUB-123456",
    "licenseType": "Transport",
    "issueDate": "2024-01-01",
    "expiryDate": "2025-01-01",
    "issuingAuthority": "Dubai Municipality"
  },
  "bankDetails": {
    "bankName": "Emirates NBD",
    "accountNumber": "1234567890",
    "routingNumber": "EBILAEAD",
    "accountType": "business"
  }
}

### 9. Get Company Profile
GET {{baseUrl}}/api/companies/profile
Authorization: Bearer {{authToken}}

### 10. Update Company Profile
PUT {{baseUrl}}/api/companies/profile
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "companyName": "ABC Transport LLC - Updated",
  "phoneNumber": "+971504567999"
}

## üîß JOB CARD TESTS

### 11. Create Job Card
POST {{baseUrl}}/api/jobcards
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "vehicleInfo": {
    "licensePlate": "DUB-12345",
    "make": "Mercedes",
    "model": "Actros",
    "year": 2020,
    "vin": "WDB9630351L123456",
    "mileage": 150000
  },
  "issueDescription": "Engine overheating and brake system maintenance required",
  "priority": "high",
  "estimatedCost": 2500,
  "estimatedCompletionDate": "2024-12-25",
  "serviceType": "maintenance",
  "assignedTechnician": "Tech001"
}

### 12. Get All Job Cards
GET {{baseUrl}}/api/jobcards
Authorization: Bearer {{authToken}}

### 13. Get Job Card by ID
GET {{baseUrl}}/api/jobcards/{jobCardId}
Authorization: Bearer {{authToken}}

### 14. Update Job Card Status
PUT {{baseUrl}}/api/jobcards/{jobCardId}/status
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "status": "in_progress",
  "notes": "Started engine diagnostics"
}

### 15. Complete Job Card
PUT {{baseUrl}}/api/jobcards/{jobCardId}/complete
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "finalCost": 2300,
  "completionNotes": "Engine cooling system repaired, brake pads replaced"
}

## üí∞ PAYMENT TESTS

### 16. Process Cash Payment
POST {{baseUrl}}/api/payments/process
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "amount": 2500,
  "paymentMethod": "cash",
  "jobCardId": "{jobCardId}",
  "description": "Engine repair and brake maintenance",
  "metadata": {
    "receiptNumber": "RCP-001",
    "cashierName": "John Smith"
  }
}

### 17. Process Card Payment
POST {{baseUrl}}/api/payments/process
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "amount": 1500,
  "paymentMethod": "card",
  "cardDetails": {
    "cardNumber": "4111111111111111",
    "expiryMonth": "12",
    "expiryYear": "2025",
    "cvv": "123",
    "cardholderName": "John Doe"
  },
  "description": "Routine maintenance service"
}

### 18. Get Payment History
GET {{baseUrl}}/api/payments/history
Authorization: Bearer {{authToken}}

### 19. Get Payment by ID
GET {{baseUrl}}/api/payments/{paymentId}
Authorization: Bearer {{authToken}}

### 20. Refund Payment
POST {{baseUrl}}/api/payments/{paymentId}/refund
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "amount": 500,
  "reason": "Partial service cancellation"
}

## üëë ADMIN PANEL TESTS

### 21. Get Dashboard Analytics
GET {{baseUrl}}/api/admin/dashboard
Authorization: Bearer {{adminToken}}

### 22. Get Revenue Analytics
GET {{baseUrl}}/api/admin/analytics/revenue
Authorization: Bearer {{adminToken}}

### 23. Get User Statistics
GET {{baseUrl}}/api/admin/analytics/users
Authorization: Bearer {{adminToken}}

### 24. Get System Metrics
GET {{baseUrl}}/api/admin/system/metrics
Authorization: Bearer {{adminToken}}

### 25. Export Data
POST {{baseUrl}}/api/admin/export
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "type": "users",
  "format": "csv",
  "dateRange": {
    "start": "2024-01-01",
    "end": "2024-12-31"
  }
}

## üõí STORE & INVENTORY TESTS

### 26. Create Store Item
POST {{baseUrl}}/api/store/items
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "name": "Brake Pads - Heavy Duty",
  "description": "Premium brake pads for heavy commercial vehicles",
  "category": "brake_parts",
  "price": 250,
  "quantity": 50,
  "minQuantity": 10,
  "supplier": "AutoParts UAE",
  "sku": "BP-HD-001",
  "specifications": {
    "material": "Ceramic",
    "compatibility": "Mercedes Actros, Volvo FH",
    "warranty": "12 months"
  }
}

### 27. Get All Store Items
GET {{baseUrl}}/api/store/items
Authorization: Bearer {{authToken}}

### 28. Search Store Items
GET {{baseUrl}}/api/store/items/search?q=brake&category=brake_parts
Authorization: Bearer {{authToken}}

### 29. Update Item Quantity
PUT {{baseUrl}}/api/store/items/{itemId}/quantity
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "quantity": 45,
  "operation": "subtract",
  "reason": "Used in job card #12345"
}

### 30. Add to Cart
POST {{baseUrl}}/api/cart/add
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "itemId": "{storeItemId}",
  "quantity": 2
}

### 31. Get Cart
GET {{baseUrl}}/api/cart
Authorization: Bearer {{authToken}}

### 32. Checkout Cart
POST {{baseUrl}}/api/cart/checkout
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "paymentMethod": "card",
  "shippingAddress": {
    "street": "123 Workshop Street",
    "city": "Dubai",
    "zipCode": "00000"
  }
}

## üîî NOTIFICATION TESTS

### 33. Send Notification
POST {{baseUrl}}/api/notifications/send
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "type": "job_update",
  "message": "Your vehicle repair has been completed",
  "channels": ["email", "sms"],
  "priority": "high",
  "data": {
    "jobCardId": "{jobCardId}",
    "estimatedCompletion": "2024-12-20T15:30:00Z"
  }
}

### 34. Get User Notifications
GET {{baseUrl}}/api/notifications
Authorization: Bearer {{authToken}}

### 35. Mark Notification as Read
PUT {{baseUrl}}/api/notifications/{notificationId}/read
Authorization: Bearer {{authToken}}

### 36. Send Bulk Notifications
POST {{baseUrl}}/api/notifications/bulk
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "type": "system_maintenance",
  "message": "Scheduled maintenance tonight from 2-4 AM",
  "channels": ["email"],
  "userRoles": ["truck_owner", "driver"]
}

## üè• HEALTH CHECK TESTS

### 37. Basic Health Check
GET {{baseUrl}}/health

### 38. Detailed Health Check
GET {{baseUrl}}/health/detailed

### 39. Database Health
GET {{baseUrl}}/health/database

### 40. API Documentation
GET {{baseUrl}}/api-docs

## üîí SECURITY TESTS

### 41. Test Rate Limiting (Make 10 rapid requests)
GET {{baseUrl}}/api/users/profile
Authorization: Bearer {{authToken}}

### 42. Test Invalid Token
GET {{baseUrl}}/api/users/profile
Authorization: Bearer invalid_token_here

### 43. Test Missing Authorization
GET {{baseUrl}}/api/users/profile

### 44. Test Role-Based Access (User accessing admin endpoint)
GET {{baseUrl}}/api/admin/dashboard
Authorization: Bearer {{authToken}}

## üìä ANALYTICS TESTS

### 45. Get Job Statistics
GET {{baseUrl}}/api/analytics/jobs
Authorization: Bearer {{adminToken}}

### 46. Get Revenue Trends
GET {{baseUrl}}/api/analytics/revenue/trends?period=monthly
Authorization: Bearer {{adminToken}}

### 47. Get User Growth
GET {{baseUrl}}/api/analytics/users/growth?period=weekly
Authorization: Bearer {{adminToken}}

### 48. Get Performance Metrics
GET {{baseUrl}}/api/analytics/performance
Authorization: Bearer {{adminToken}}

## üöÄ REAL-TIME TESTS

### 49. Get Real-time Updates
GET {{baseUrl}}/api/realtime/updates
Authorization: Bearer {{authToken}}

### 50. Track Job Progress
GET {{baseUrl}}/api/realtime/job/{jobCardId}/track
Authorization: Bearer {{authToken}}

## NOTES FOR TESTING:
1. Start with authentication tests to get tokens
2. Create company profile before creating job cards
3. Create job cards before processing payments
4. Use actual IDs from responses in subsequent requests
5. Admin endpoints require admin token
6. Some tests depend on previous test data

## SUCCESS CRITERIA:
- Status codes: 200 (GET), 201 (POST), 204 (DELETE)
- All responses should have "success": true
- Tokens should be valid and working
- Role-based access should be enforced
- Error handling should return proper error messages

## PERFORMANCE EXPECTATIONS:
- Response time < 200ms for simple queries
- Response time < 1s for complex analytics
- Rate limiting should kick in after 100 requests/hour
- Database queries should be optimized
